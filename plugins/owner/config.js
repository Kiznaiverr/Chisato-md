import config from '../lib/config.js'

export default {
    command: 'config',
    aliases: ['cfg', 'setting', 'settings'],
    category: 'owner',
    description: 'Manage bot configuration settings',
    usage: 'config [action] [key] [value]',
    ownerOnly: true,
    cooldown: 5,
    
    async execute({ reply, args, prefix }) {
        const action = args[0]?.toLowerCase()
        
        if (!action) {
            return this.showConfigMenu(reply, prefix)
        }
        
        switch (action) {
            case 'get':
            case 'show':
                return this.getConfig(args[1], reply)
                
            case 'set':
                return this.setConfig(args[1], args.slice(2).join(' '), reply)
                
            case 'list':
            case 'all':
                return this.showAllConfig(reply)
                
            case 'reset':
                return this.resetConfig(args[1], reply)
                
            case 'reload':
                return this.reloadConfig(reply)
                
            case 'backup':
                return this.backupConfig(reply)
                
            default:
                return reply(`‚ùå Unknown action: ${action}\n\nüí° Use ${prefix}config for help`)
        }
    },
    
    showConfigMenu(reply, prefix) {
        const menuText = `‚ï≠‚îÄ„Äå ‚öôÔ∏è Configuration Manager „Äç
‚îú üìã Available Actions:
‚îú ${prefix}config get <key> - Get config value
‚îú ${prefix}config set <key> <value> - Set config value  
‚îú ${prefix}config list - Show all configurations
‚îú ${prefix}config reset <section> - Reset section to default
‚îú ${prefix}config reload - Reload from file
‚îú ${prefix}config backup - Create config backup
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îú üìÇ Available Sections:
‚îú ‚Ä¢ botSettings - Bot basic settings
‚îú ‚Ä¢ ownerSettings - Owner configuration
‚îú ‚Ä¢ adminSettings - Admin management
‚îú ‚Ä¢ limitSettings - Daily limits & quotas
‚îú ‚Ä¢ cooldownSettings - Command cooldowns
‚îú ‚Ä¢ securitySettings - Security features
‚îú ‚Ä¢ featureSettings - Bot features
‚îú ‚Ä¢ logSettings - Logging configuration
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îú üí° Examples:
‚îú ${prefix}config get botSettings.prefix
‚îú ${prefix}config set botSettings.botName MyBot
‚îú ${prefix}config list botSettings
‚ï∞ ${prefix}config reset botSettings`
        
        return reply(menuText)
    },
    
    getConfig(key, reply) {
        if (!key) {
            return reply('‚ùå Please specify a config key!\n\nüí° Example: config get botSettings.prefix')
        }
        
        try {
            const [section, configKey] = key.split('.')
            let value
            
            if (configKey) {
                value = config.get(section, configKey)
            } else {
                value = config.get(section)
            }
            
            if (value === undefined) {
                return reply(`‚ùå Config key "${key}" not found!`)
            }
            
            let displayValue = value
            if (typeof value === 'object') {
                displayValue = JSON.stringify(value, null, 2)
            }
            
            const configText = `‚ï≠‚îÄ„Äå üìã Config Value „Äç
‚îú üîë Key: ${key}
‚îú üìÑ Value: ${displayValue}
‚îú üìä Type: ${typeof value}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
            
            return reply(configText)
        } catch (error) {
            return reply(`‚ùå Error getting config: ${error.message}`)
        }
    },
    
    setConfig(key, value, reply) {
        if (!key || value === undefined) {
            return reply('‚ùå Please specify key and value!\n\nüí° Example: config set botSettings.prefix !')
        }
        
        try {
            const [section, configKey] = key.split('.')
            
            if (!configKey) {
                return reply('‚ùå Please specify section.key format!\n\nüí° Example: botSettings.prefix')
            }
            
            // Parse value if it looks like JSON
            let parsedValue = value
            if (value.startsWith('[') || value.startsWith('{') || value === 'true' || value === 'false' || !isNaN(value)) {
                try {
                    parsedValue = JSON.parse(value)
                } catch {
                    // Keep as string if JSON parsing fails
                }
            }
            
            const success = config.set(section, configKey, parsedValue)
            
            if (success) {
                const configText = `‚úÖ Configuration updated!

‚ï≠‚îÄ„Äå üìù Updated Config „Äç
‚îú üîë Key: ${key}
‚îú üìÑ Old Value: ${config.get(section, configKey)}
‚îú üìÑ New Value: ${parsedValue}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

üí° Changes saved to config.json`
                
                return reply(configText)
            } else {
                return reply('‚ùå Failed to save configuration!')
            }
        } catch (error) {
            return reply(`‚ùå Error setting config: ${error.message}`)
        }
    },
    
    showAllConfig(reply) {
        try {
            const sections = args[1] ? [args[1]] : [
                'botSettings', 'ownerSettings', 'adminSettings', 
                'limitSettings', 'cooldownSettings', 'securitySettings',
                'featureSettings', 'logSettings'
            ]
            
            let configText = `‚ï≠‚îÄ„Äå üìã Bot Configuration „Äç\n`
            
            sections.forEach((section, index) => {
                const sectionData = config.get(section)
                if (sectionData) {
                    const isLast = index === sections.length - 1
                    const symbol = isLast ? '‚ï∞' : '‚îú'
                    
                    configText += `‚îú üìÇ ${section}:\n`
                    Object.entries(sectionData).forEach(([key, value], i, arr) => {
                        const isLastItem = i === arr.length - 1 && isLast
                        const itemSymbol = isLastItem ? '‚ï∞' : '‚îÇ'
                        let displayValue = value
                        
                        // Hide sensitive data
                        if (key.toLowerCase().includes('key') || key.toLowerCase().includes('secret')) {
                            displayValue = '***hidden***'
                        } else if (Array.isArray(value)) {
                            displayValue = `[${value.length} items]`
                        } else if (typeof value === 'object') {
                            displayValue = '{...}'
                        }
                        
                        configText += `${itemSymbol}   ${key}: ${displayValue}\n`
                    })
                }
            })
            
            return reply(configText)
        } catch (error) {
            return reply(`‚ùå Error showing config: ${error.message}`)
        }
    },
    
    resetConfig(section, reply) {
        if (!section) {
            return reply('‚ùå Please specify section to reset!\n\nüí° Example: config reset botSettings')
        }
        
        try {
            // This would require implementing reset in config manager
            return reply(`‚ö†Ô∏è Reset feature not implemented yet for security reasons.
            
Please manually edit config.json or delete it to regenerate defaults.`)
        } catch (error) {
            return reply(`‚ùå Error resetting config: ${error.message}`)
        }
    },
    
    reloadConfig(reply) {
        try {
            config.reload()
            return reply('‚úÖ Configuration reloaded from file!')
        } catch (error) {
            return reply(`‚ùå Error reloading config: ${error.message}`)
        }
    },
    
    backupConfig(reply) {
        try {
            const fs = require('fs')
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
            const backupPath = `./config-backup-${timestamp}.json`
            
            fs.copyFileSync('./config.json', backupPath)
            
            return reply(`‚úÖ Configuration backed up!
            
üìÅ Backup saved to: ${backupPath}
üïí Timestamp: ${new Date().toLocaleString('id-ID')}`)
        } catch (error) {
            return reply(`‚ùå Error creating backup: ${error.message}`)
        }
    }
}
